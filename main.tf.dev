# Configure the Azure provider
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0.2"
    }
    rancher2 = {
      source = "rancher/rancher2"
    }
    template = {
      source = "hashicorp/template"
    }
    helm = {
      source = "hashicorp/helm"
    }
  required_version = ">= 1.1.0"
  }
}

provider "azurerm" {
  version = ">=1.1.2"
  features {}
}

# common
resource "random_integer" "this" {
  min = 1
  max = 9999
}

resource "tls_private_key" "this" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

locals {
    location = "eastus1"
    prefix = "team4-${random_integer.this.result}"
    public_ssh_key = "${tls_private_key.this.public_key_openssh}"
}

data "http" "myipv4" {
  url = "http://whatismyip.akamai.com/"
}

# base 
resource "azurerm_resource_group" "this" {
  name     = "${local.prefix}-rg"
  location = local.location
}

resource "azurerm_virtual_network" "this" {
  name                   = "${local.prefix}-vnet"
  address_space          = ["10.0.0.0/16"]
  location               = azurerm_resource_group.this.location
  resource_group_name    = azurerm_resource_group.this.name
  subnet {
    name                 = "${local.prefix}-rancher-subnet"
    address_prefix       = "10.0.10.0/24"
  }
  subnet {
    name                 = "${local.prefix}-downstream-subnet"
    address_prefix       = "10.0.20.0/24"
  }
  subnet {
    name                 = "${local.prefix}-bastion-subnet"
    address_prefix       = "192.168.1.224/27"
  }
  subnet {
    name                 = "${local.prefix}-mgmt-subnet"
    address_prefix       = "10.0.100.0/24"
  }
}

resource "azurerm_storage_account" "this" {
  name                = "${local.prefix}-storage"
  resource_group_name = azurerm_resource_group.this.name

  location                 = azurerm_resource_group.this.location
  account_tier             = "Standard"
  account_replication_type = "LRS"

  network_rules {
    default_action             = "Deny"
    ip_rules                   = ["10.0.1.0"]
    virtual_network_subnet_ids = [azurerm_subnet.rancher.id]
  }

  tags = {
    environment = "dev"
  }
}

resource "azurerm_ssh_public_key" "this" {
  name                = "${local.prefix}-ssh-key"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  public_key          = tls_private_key.this.public_key_openssh
}

resource "local_file" "rancher_pem_file" {
  filename = format("%s/%s", "${path.root}/keys", "${azurerm_ssh_public_key.this.key_name}.pem") 
  sensitive_content = tls_private_key.this.private_key_pem
}

# TODO: Store Rancher tokens in vault
resource "azurerm_key_vault" "this" {
  name                = "${local.prefix}-key-vault"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  sku_name            = "standard"
  tenant_id           = data.azurerm_client_config.current.tenant_id
  admin {
    email_address = "ross.kirkpatrick@suse.com"
  }
 soft_delete_retention_days = 7

  access_policy {
    tenant_id = data.azurerm_client_config.current.tenant_id
    object_id = data.azurerm_client_config.current.object_id

    certificate_permissions = [
      "create",
      "delete",
      "deleteissuers",
      "get",
      "getissuers",
      "import",
      "list",
      "listissuers",
      "managecontacts",
      "manageissuers",
      "purge",
      "setissuers",
      "update",
    ]

    key_permissions = [
      "backup",
      "create",
      "decrypt",
      "delete",
      "encrypt",
      "get",
      "import",
      "list",
      "purge",
      "recover",
      "restore",
      "sign",
      "unwrapKey",
      "update",
      "verify",
      "wrapKey",
    ]

    secret_permissions = [
      "backup",
      "delete",
      "get",
      "list",
      "purge",
      "recover",
      "restore",
      "set",
    ]
  }
}

resource "azurerm_key_vault_certificate" "rancher" {
  name         = "${local.prefix}-rancher-cert"
  key_vault_id = azurerm_key_vault.this.id

  certificate_policy {
    issuer_parameters {
      name = "Self"
    }

    key_properties {
      exportable = true
      key_size   = 4096
      key_type   = "RSA"
      reuse_key  = true
    }

    lifetime_action {
      action {
        action_type = "AutoRenew"
      }

      trigger {
        days_before_expiry = 30
      }
    }

    secret_properties {
      content_type = "application/x-pkcs12"
    }

    x509_certificate_properties {
      # Server Authentication = 1.3.6.1.5.5.7.3.1
      # Client Authentication = 1.3.6.1.5.5.7.3.2
      extended_key_usage = ["1.3.6.1.5.5.7.3.1"]

      key_usage = [
        "cRLSign",
        "dataEncipherment",
        "digitalSignature",
        "keyAgreement",
        "keyCertSign",
        "keyEncipherment",
      ]

      subject_alternative_names {
        dns_names = ["registry.rancherlabs.work", "rancher.rancherlabs.work"]
      }

      subject            = "CN=rancherlabs-work"
      validity_in_months = 12
    }
  }
}

# bastion for private network
resource "azurerm_public_ip" "bastion" {
  name                = "${local.prefix}-bastion-public-ip"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  allocation_method   = "Static"
  sku                 = "Standard"
}

resource "azurerm_bastion_host" "rancher" {
  name                = "${local.prefix}-bastion"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  ip_configuration {
    name                 = "${local.prefix}-bastion-network"
    subnet_id            = azurerm_subnet.bastion.id
    public_ip_address_id = azurerm_public_ip.bastion.id
  }
}

# Bastion NSG
resource "azurerm_network_security_group" "bastion" {
  name                = "${local.prefix}-bastion-nsg"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  security_rule {
    name                       = "BastionHTTPSIn"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefixes      = [azurerm_virtual_network.this.address_space, "${chomp(data.http.myipv4.body)}/32"]
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "DenyAll"
    priority                   = 102
    direction                  = "Inbound"
    access                     = "Deny"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefixe      = "Internet"
    destination_address_prefix = "*"
  }
}

# Rancher NSGs
resource "azurerm_network_security_group" "rancher" {
  name                = "${local.prefix}-rancher-nsg"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  security_rule {
    name                       = "DenyAll"
    priority                   = 100
    direction                  = "Inbound"
    access                     = "Deny"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefixe     = "Internet"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "https"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefixes      = [azurerm_virtual_network.this.address_space, "${chomp(data.http.myipv4.body)}/32"]
    destination_address_prefix = "*"
  }
  
  security_rule {
    name                       = "http"
    priority                   = 102
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "etcd"
    priority                   = 103
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "2379-2380"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }

    security_rule {
    name                       = "etcd-client"
    priority                   = 104
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "2376"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }

    security_rule {
    name                       = "kube-api"
    priority                   = 105
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "6443"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }

    security_rule {
    name                       = "windows-vxlan"
    priority                   = 106
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Udp"
    source_port_range          = "*"
    destination_port_range     = "8472"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "default-vxlan"
    priority                   = 107
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Udp"
    source_port_range          = "*"
    destination_port_range     = "4789"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "typha"
    priority                   = 108
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "5473"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "kubelet"
    priority                   = 109
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "10250-10252"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "rke2-proxy"
    priority                   = 110
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "9345"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "k8s-tcp-node-ports"
    priority                   = 111
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "30000-32767"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "k8s-udp-node-ports"
    priority                   = 112
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Udp"
    source_port_range          = "*"
    destination_port_range     = "30000-32767"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "bgp"
    priority                   = 113
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "179"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "prometheus-metrics"
    priority                   = 114
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "9796"
    source_address_prefix      = azurerm_virtual_network.this.address_space
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "inbound-frontdoor-https"
    priority                   = 115
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "Frontdoor"
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "inbound-frontdoor-http"
    priority                   = 116
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "80"
    source_address_prefix      = "Frontdoor"
    destination_address_prefix = "*"
  }
  security_rule {
    name                       = "OutboundAll"
    priority                   = 200
    direction                  = "Outbound"
    access                     = "Allow"
    protocol                   = "*"
    source_port_range          = "*"
    destination_port_range     = "*"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

resource "azurerm_subnet" "mgmt" {
  name                 = "${local.prefix}-mgmt-subnet"
  resource_group_name  = azurerm_resource_group.this.name
  virtual_network_name = azurerm_virtual_network.this.name
}

resource "azurerm_network_security_group" "mgmt" {
  name                = "${local.prefix}-mgmt-nsg"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  security_rule {
    name                       = "AllowSyncWithAzureAD"
    priority                   = 101
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "443"
    source_address_prefix      = "AzureActiveDirectoryDomainServices"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "AllowRD"
    priority                   = 201
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "3389"
    source_address_prefix      = "VirtualNetwork"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "AllowPSRemoting"
    priority                   = 301
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "5986"
    source_address_prefix      = "AzureActiveDirectoryDomainServices"
    destination_address_prefix = "*"
  }

  security_rule {
    name                       = "AllowLDAPS"
    priority                   = 401
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "636"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

resource azurerm_subnet_network_security_group_association "mgmt" {
  subnet_id                 = azurerm_subnet.mgmt.id
  network_security_group_id = azurerm_network_security_group.mgmt.id
}

resource "azuread_group" "dc_admins" {
  display_name     = "${local.prefix} AAD DC Administrators"
  security_enabled = true
}

resource "azuread_user" "admin" {
  user_principal_name = "${local.prefix}-dc-admin@rancherlabs.work"
  display_name        = "${local.prefix} DC Administrator"
  password            = "Pa55w0Rd!!1" // TODO: Generate password
}

resource "azuread_group_member" "admin" {
  group_object_id  = azuread_group.dc_admins.object_id
  member_object_id = azuread_user.admin.object_id
}

resource "azuread_service_principal" "team4_ad" {
  application_id = "81852a25-ec2a-4360-b498-e3137ef41556" 
}

resource "azurerm_active_directory_domain_service" "this" {
  name                = "${local.prefix}-aaads"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  domain_name           = "rancherlabs.work"
  sku                   = "Enterprise"
  filtered_sync_enabled = false

  initial_replica_set {
    subnet_id = azurerm_subnet.mgmt.id
  }

  notifications {
    additional_recipients = ["ross.kirkpatrick@suse.com", "jamie.phillips@suse.com"]
    notify_dc_admins      = true
    notify_global_admins  = true
  }

  security {
    sync_kerberos_passwords = true
    sync_ntlm_passwords     = true
    sync_on_prem_passwords  = true
  }

  tags = {
    Environment = "dev"
    RancherTeam = local.prefix
  }

  depends_on = [
    azuread_service_principal.team4_ad,
    azurerm_subnet_network_security_group_association.mgmt,
  ]
}

resource "azurerm_network_interface" "this" {
  name                = "${local.prefix}-nic"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.internal.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "random_password" "postgres_admin" {
  length           = 16
  special          = true
  override_special = "_%@"
}

# k3s external db for Rancher
resource "azurerm_postgresql_server" "this" {
  name                = "${local.prefix}-postgresql-server"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name

  sku_name = "B_Gen5_2"

  storage_mb                   = 5120
  backup_retention_days        = 7
  geo_redundant_backup_enabled = false
  auto_grow_enabled            = true

  administrator_login          = "psqladmin"
  administrator_login_password = random_password.postgres_admin.result 
  version                      = "9.5"
  ssl_enforcement_enabled      = true
}

resource "azurerm_postgresql_database" "this" {
  name                = "${local.prefix}-postgresql-db"
  resource_group_name = azurerm_resource_group.this.name
  server_name         = azurerm_postgresql_server.this.name
  charset             = "UTF8"
  collation           = "English_United States.1252"
}

# k3s server + agent managed disks
resource "azurerm_managed_disk" "server" {
  name                 = "${local.prefix}-k3s-server-1"
  location             = azurerm_resource_group.this.location
  resource_group_name  = azurerm_resource_group.this.name
  storage_account_type = "Standard_LRS"
  create_option        = "Empty"
  disk_size_gb         = "20"

  tags = {
    environment = "dev"
  }
}

resource "azurerm_managed_disk" "agent" {
  name                 = "${local.prefix}-k3s-agent-1"
  location             = azurerm_resource_group.this.location
  resource_group_name  = azurerm_resource_group.this.name
  storage_account_type = "Standard_LRS"
  create_option        = "Empty"
  disk_size_gb         = "20"

  tags = {
    environment = "dev"
  }
}

# Configure the Rancher2 provider
resource "random_password" "rancher_admin" {
  length           = 16
  special          = true
  override_special = "_%@"
}

provider "rancher2" {
  api_url    = var.rancher_api_endpoint
  token_key  = var.rancher_api_token
  insecure   = false
}

# rancher
resource "azurerm_linux_virtual_machine_scale_set" "rancher" {
  name                = "${local.prefix}-rancher-vmss"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  sku                 = "Standard_F2"
  instances           = 3
  admin_username      = "rancher"

  admin_ssh_key {
    username   = "rancher"
    public_key = azurerm_ssh_public_key.this.public_key
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "20.04-LTS"
    version   = "latest"
  }

  network_interface {
    name    = "${local.prefix}-rancher"
    primary = true

    ip_configuration {
      name      = "rancher"
      primary   = true
      subnet_id = azurerm_subnet.rancher.id
    }
  }

  os_disk {
    storage_account_type = "Standard_LRS"
    caching              = "ReadWrite"
  }
}

provider "rancher2" {
  alias     = "bootstrap"
  insecure  = false
  api_url   = azurerm_frontdoor
  bootstrap = true
  timeout   = "300s"
}

# Create a new rancher2_bootstrap using bootstrap provider config
resource "rancher2_bootstrap" "admin" {
  depends_on = [
    helm_release.rancher_server
  ]
  provider   = rancher2.bootstrap
  initial_password = "admin"
  password   = random_password.rancher_password.result
  telemetry  = true
}

# Provider config for admin
provider "rancher2" {
  alias     = "admin"
  api_url   = rancher2_bootstrap.admin.url
  token_key = rancher2_bootstrap.admin.token
  insecure  = true
}

resource "rancher2_setting" "server-url" {
  provider = rancher2.admin
  name     = "server-url"
  value    = rancher2_bootstrap.admin.url
}

resource "rancher2_token" "rancher-token" {
  provider    = rancher2.admin
  description = "Terraform ${var.owner} local cluster token"
}

# Create a new rancher2 resource using admin provider config
resource "rancher2_catalog" "rancher" {
  provider = rancher2.admin
  name     = "rancher"
  version  = "helm_v3"
  url      = "https://releases.rancher.com/server-charts/stable"
}

# Rancher backup
resource "rancher2_app_v2" "rancher-backup" {
  provider   = rancher2.admin
  cluster_id = "local"
  name       = "rancher-backup"
  namespace  = "cattle-resources-system"
  repo_name  = "rancher-charts"
  chart_name = "rancher-backup"
}

data "rancher2_role_template" "admin" {
  depends_on = [rancher2_catalog.rancher]
  provider   = rancher2.admin
  name       = "Cluster Owner"
}

# frontdoor for Rancher
resource "azurerm_frontdoor" "rancher" {
  name                = "${local.prefix}-FrontDoor"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location

  routing_rule {
    name               = "${local.prefix}-RoutingRule-Rancher"
    accepted_protocols = ["Http", "Https"]
    patterns_to_match  = ["/*"]
    frontend_endpoints = ["${local.prefix}-FrontendEndpoint-Rancher"]
    forwarding_configuration {
      forwarding_protocol = "MatchRequest"
      backend_pool_name   = "${local.prefix}-Backend-Rancher"
    }
  }

  backend_pool_load_balancing {
    name = "${local.prefix}-LoadBalancingSettings-Rancher"
  }

  backend_pool_health_probe {
    name = "${local.prefix}-HealthProbeSetting-Rancher"
  }

  backend_pool {
    name = "${local.prefix}-Backend-Rancher"
    backend {
      host_header = "www.rancher.rancherlabs.work"
      address     = "www.rancher.rancherlabs.work"
      http_port   = 80
      https_port  = 443
    }

    load_balancing_name = "${local.prefix}-LoadBalancingSettings-Rancher"
    health_probe_name   = "${local.prefix}-HealthProbeSetting-Rancher"
  }

  frontend_endpoint {
    name      = "${local.prefix}-FrontendEndpoint-Rancher"
    host_name = "${local.prefix}-${random_integer.this}.azurefd.net"
  }
}

# downstream control plane
resource "azurerm_linux_virtual_machine" "control_plane" {
  name                = "${var.prefix}-cp-machine"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  size                = "Standard_F2"
  admin_username      = "rancher"
  network_interface_ids = [
    azurerm_network_interface.example.id,
  ]

  admin_ssh_key {
    username   = "adminuser"
    public_key = file("~/.ssh/id_rsa.pub")
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "20.04-LTS"
    version   = "latest"
  }
}

resource "azurerm_linux_virtual_machine_scale_set" "control_plane" {
  name                = "${var.prefix}-cp-vmss"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  sku                 = "Standard_F2"
  instances           = 3
  admin_username      = "rancher"
  upgrade_mode = "Manual"
  custom_data = ""
  user_data = ""

  admin_ssh_key {
    username   = "rancher"
    public_key = azurerm_ssh_public_key.this.public_key
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "20.04-LTS"
    version   = "latest"
  }

  network_interface {
    name    = "ds_controlplane"
    primary = true

    ip_configuration {
      name      = "ds_controlplane"
      primary   = true
      subnet_id = azurerm_subnet.downstream.id
    }
  }

  os_disk {
    storage_account_type = "Standard_LRS"
    caching              = "ReadWrite"
  }
  certificate {
    url = "" //  This can be sourced from the secret_id field within the azurerm_key_vault_certificate Resource.
  }

  secret {
    certificate = 
    key_vault_id = 
  }

}


# downstream etcd
resource "azurerm_linux_virtual_machine_scale_set" "etcd" {
  name                = "${local.prefix}-etcd-vmss"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  sku                 = "Standard_F2"
  instances           = 3
  admin_username      = "rancher"

  admin_ssh_key {
    username   = "rancher"
    public_key = azurerm_ssh_public_key.this.public_key
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "20.04-LTS"
    version   = "latest"
  }

  network_interface {
    name    = "ds_etcd"
    primary = true

    ip_configuration {
      name      = "ds_etcd"
      primary   = true
      subnet_id = azurerm_subnet.downstream.id
    }
  }

  os_disk {
    storage_account_type = "StandardSSD_LRS"
    caching              = "ReadWrite"
  }

  secret {
    certificate = 
    key_vault_id = 
  }
}


# downstream linux workers
resource "azurerm_linux_virtual_machine_scale_set" "linux_worker" {
  name                = "${local.prefix}-linux-worker-vmss"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  sku                 = "Standard_F2"
  instances           = 3
  admin_username      = "rancher"

  admin_ssh_key {
    username   = "rancher"
    public_key = azurerm_ssh_public_key.this.public_key
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "20.04-LTS"
    version   = "latest"
  }

  network_interface {
    name    = "ds_linux_worker"
    primary = true

    ip_configuration {
      name      = "ds_linux_worker"
      primary   = true
      subnet_id = azurerm_subnet.downstream.id
    }
  }

  os_disk {
    storage_account_type = "Standard_LRS"
    caching              = "ReadWrite"
  }
}

resource "random_password" "windows_admin" {
  length           = 16
  special          = true
  override_special = "_%@"
}

# downstream windows
resource "azurerm_windows_virtual_machine_scale_set" "windows_worker" {
  name                = "${local.prefix}-windows-worker-vmss"
  resource_group_name = azurerm_resource_group.this.name
  location            = azurerm_resource_group.this.location
  sku                 = "Standard_F2"
  instances           = 1
  admin_password      = random_password.windows_admin.result 
  admin_username      = "rancher"

  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2019-Datacenter-Server-Core"
    version   = "latest"
  }

  os_disk {
    storage_account_type = "Standard_LRS"
    caching              = "ReadWrite"
  }

  network_interface {
    name    = "ds_windows_worker"
    primary = true

    ip_configuration {
      name      = "ds_windows_worker"
      primary   = true
      subnet_id = azurerm_subnet.downstream.id
    }
  }
}

# create disk snapshots for k3s server+agent after creation and bootstrap
resource "azurerm_snapshot" "server" {
  name                = "snapshot"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  create_option       = "Copy"
  source_uri          = azurerm_managed_disk.server.id
}

resource "azurerm_snapshot" "agent" {
  name                = "snapshot"
  location            = azurerm_resource_group.this.location
  resource_group_name = azurerm_resource_group.this.name
  create_option       = "Copy"
  source_uri          = azurerm_managed_disk.agent.id
}
